{"version":3,"sources":["components/Message.js","components/Progress.js","components/FileUpload.js","App.js","index.js"],"names":["Message","_ref","msg","_ref$type","type","react_default","a","createElement","className","concat","role","data-dismiss","aria-label","aria-hidden","Progress","percentage","style","width","FileUpload","isProcessing","setProcessing","_useState","useState","_useState2","Object","slicedToArray","file","setFile","_useState3","_useState4","filename","setFilename","_useState5","_useState6","uploadedFile","setUploadedFile","_useState7","_useState8","message","setMessage","_useState9","_useState10","uploadPercentage","setUploadPercentage","getQueryStringValue","key","decodeURIComponent","window","location","search","replace","RegExp","encodeURIComponent","onSubmit","_ref2","asyncToGenerator","regenerator_default","mark","_callee","e","formData","user_secret","refund_type","reason","res","_res$data","fileName","filePath","data","wrap","_context","prev","next","console","log","preventDefault","FormData","append","axios","post","headers","Content-Type","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","sent","t0","stop","_x","apply","this","arguments","react","class","components_Message","accept","id","onChange","target","files","name","htmlFor","components_Progress","disabled","value","status","Date","toLocaleDateString","scope","report","map","result","order","refunded","href","url","src","alt","App","components_FileUpload","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.df255b62.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Message = ({ msg, type = 'info' }) => {\n  return (\n    <div\n      className={`alert alert-${type} alert-dismissible fade show`}\n      role=\"alert\"\n    >\n      {msg}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  )\n}\n\nMessage.propTypes = {\n  msg: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n}\n\nexport default Message\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Progress = ({ percentage }) => {\n  return (\n    <div className=\"progress\">\n      <div\n        className=\"progress-bar progress-bar-striped bg-info\"\n        role=\"progressbar\"\n        style={{ width: `${percentage}%` }}\n      >\n        {percentage}%\n      </div>\n    </div>\n  )\n}\n\nProgress.propTypes = {\n  percentage: PropTypes.number.isRequired,\n}\n\nexport default Progress\n","import React, { Fragment, useState } from 'react'\nimport Message from './Message'\nimport Progress from './Progress'\nimport axios from 'axios'\n\nconst FileUpload = ({ isProcessing, setProcessing }) => {\n  // const [processing, setProcessing] = useState(false)\n  const [file, setFile] = useState('')\n  const [filename, setFilename] = useState('Choose File')\n  const [uploadedFile, setUploadedFile] = useState(false)\n  const [message, setMessage] = useState('')\n  const [uploadPercentage, setUploadPercentage] = useState(0)\n\n  const getQueryStringValue = (key) => {\n    return decodeURIComponent(\n      window.location.search.replace(\n        new RegExp(\n          '^(?:.*[&\\\\?]' +\n            encodeURIComponent(key).replace(/[\\.\\+\\*]/g, '\\\\$&') +\n            '(?:\\\\=([^&]*))?)?.*$',\n          'i'\n        ),\n        '$1'\n      )\n    )\n  }\n\n  // Would write the value of the QueryString-variable called name to the console\n\n  const onChange = (e) => {\n    setFile(e.target.files[0])\n    setFilename(e.target.files[0].name)\n  }\n\n  const onSubmit = async (e) => {\n    console.log('Submitting ')\n    e.preventDefault()\n    const formData = new FormData()\n    formData.append('file', file)\n    const user_secret = getQueryStringValue('user_secret')\n    const refund_type = getQueryStringValue('refund_type')\n    const reason = getQueryStringValue('reason')\n    if (user_secret && reason && refund_type) {\n      try {\n        const res = await axios.post(\n          `/upload?user_secret=${user_secret}&reason=${reason}&refund_type=${refund_type}`,\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n            onUploadProgress: (progressEvent) => {\n              setUploadPercentage(\n                parseInt(\n                  Math.round((progressEvent.loaded * 100) / progressEvent.total)\n                )\n              )\n\n              // Clear percentage and setting processing\n              setUploadPercentage(0)\n              setProcessing(true)\n            },\n          }\n        )\n\n        const { fileName, filePath, data } = res.data\n        console.log({ data: res.data })\n        setProcessing(false)\n        setUploadedFile({ fileName, filePath, data })\n\n        setMessage('File Uploaded Processing request')\n      } catch (err) {\n        setProcessing(false)\n\n        setMessage('There was a problem with the server')\n      }\n    }\n  }\n\n  return (\n    <Fragment>\n      {isProcessing ? (\n        <div className=\"h-100 w-100 d-flex justify-content-center align-content-center\">\n          <div class=\"spinner-border text-primary\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      ) : (\n        <Fragment>\n          {message.msg ? <Message msg={message.msg} /> : null}\n          <form onSubmit={onSubmit}>\n            <div className=\"custom-file mb-4\">\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                className=\"custom-file-input\"\n                id=\"customFile\"\n                onChange={onChange}\n              />\n              <label className=\"custom-file-label\" htmlFor=\"customFile\">\n                {filename}\n              </label>\n            </div>\n\n            <Progress percentage={uploadPercentage} />\n\n            <input\n              disabled={typeof file == 'string'}\n              type=\"submit\"\n              value=\"Upload\"\n              className=\"btn btn-primary btn-block mt-4\"\n            />\n          </form>\n          {uploadedFile ? (\n            <div className=\"row mt-5\">\n              <div className=\"col-md-6 m-auto\">\n                <h2 className=\"text-center\">Report</h2>\n                <h4\n                  className={`text-center text-muted text-${\n                    uploadedFile.data.status == 200 ? 'info' : 'danger'\n                  }`}\n                >\n                  {uploadedFile.data.status == 200\n                    ? 'Everything worked successfully'\n                    : 'Error on the server please reach out to Leigh or Vaval '}\n                </h4>\n                <h6 className=\"text-center text-muted\">\n                  {new Date().toLocaleDateString()}\n                </h6>\n                <span className=\"text-muted mt-2\">Save Report coming soon</span>\n                <table class=\"table\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Order number</th>\n                      <th scope=\"col\">Result</th>\n                      <th scope=\"col\">Reason</th>\n                      <th scope=\"col\">Refunded</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {uploadedFile.data.report.map((result) => (\n                      <tr>\n                        <th scope=\"row\">{result.order}</th>\n                        <td>{result.msg}</td>\n                        <td>{result.reason}</td>\n                        <td>{result.type}</td>\n                        <td>\n                          <i\n                            className={`fa-${\n                              result.refunded\n                                ? 'check text-success'\n                                : 'times text-danger'\n                            }`}\n                          ></i>\n                        </td>\n                        <td>\n                          {' '}\n                          <a href={result.url}>View Order</a>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n                <h3 className=\"text-center\">{uploadedFile.fileName}</h3>\n                <img\n                  style={{ width: '100%' }}\n                  src={uploadedFile.filePath}\n                  alt=\"\"\n                />\n              </div>\n            </div>\n          ) : null}\n        </Fragment>\n      )}\n    </Fragment>\n  )\n}\n\nexport default FileUpload\n","import React, { useState } from 'react'\nimport FileUpload from './components/FileUpload'\nimport './App.css'\n\nconst App = () => {\n  const [isProcessing, setProcessing] = useState(false)\n\n  return (\n    <div className=\"container mt-4\">\n      <h4 className=\"display-4 text-center mb-4\">\n        {isProcessing\n          ? 'Processing your request, get some ☕️'\n          : ' Click below to upload a csv'}\n      </h4>\n      <FileUpload isProcessing={isProcessing} setProcessing={setProcessing} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}